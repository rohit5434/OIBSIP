import java.util.ArrayList;
import java.util.Scanner;

class Account {
   String userId, userPin;
   double balance = 0;
   ArrayList<String> history = new ArrayList<>();

    public Account(String id, String pin) {
        userId = id; userPin = pin;
    }

    public boolean authenticate(String pin) {
        return userPin.equals(pin);
    }

    public void deposit(double amount) {
        balance += amount;
        history.add("Deposited: $" + amount);
    }

    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            history.add("Withdrew: $" + amount);
            return true;
        }
        return false;
    }

    public boolean transfer(Account to, double amount) {
        if (balance >= amount) {
            balance -= amount;
            to.deposit(amount);
            history.add("Transferred: $" + amount + " to " + to.userId);
            return true;
        }
        return false;
    }

    public void printHistory() {
        for (String entry : history)
            System.out.println(entry);
    }

    public double getBalance() {
        return balance;
    }
}


public class ATM {
   static ArrayList<Account> accounts = new ArrayList<>();

    public static void main(String[] args) {
        accounts.add(new Account("user1", "1234"));
        accounts.add(new Account("user2", "5678"));
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter User ID: ");
        String id = sc.nextLine();
        System.out.print("Enter PIN: ");
        String pin = sc.nextLine();
        
        Account account = login(id, pin);
        if (account != null) {
            int choice;
            do {
                System.out.println("\n1. Transaction History 2. Withdraw 3. Deposit 4. Transfer 5. Quit");
                choice = sc.nextInt();
                switch (choice) {
                    case 1: account.printHistory(); break;
                    case 2: System.out.print("Withdraw: ");
                        if (!account.withdraw(sc.nextDouble())) 
                            System.out.println("Insufficient balance"); break;
                    case 3: System.out.print("Deposit: ");
                        account.deposit(sc.nextDouble()); break;
                    case 4: System.out.print("Transfer to (ID): ");
                        Account recipient = findAccount(sc.next());
                        if (recipient != null) {
                            System.out.print("Amount: ");
                            if (!account.transfer(recipient, sc.nextDouble())) 
                                System.out.println("Insufficient balance");
                        } else {
                            System.out.println("User not found");
                        }
                        break;
                    case 5: System.out.println("Goodbye!"); break;
                }
            } while (choice != 5);
        } else {
            System.out.println("Invalid login");
        }
        sc.close(); // Closing the scanner to avoid resource leaks
    }

   static Account login(String id, String pin) {
        for (Account acc : accounts)
            if (acc.authenticate(pin) && acc.equals(findAccount(id)))
                return acc;
        return null;
    }

   static Account findAccount(String id) {
        for (Account acc : accounts)
            if (acc.userId.equals(id))
                return acc;
        return null;
    }
}
